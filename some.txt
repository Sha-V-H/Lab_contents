---- Java ----
package c_N;

import java.io.*;
import java.util.Scanner;

class CRC {
    public static void main(String a[]) throws IOException {

        Scanner in = new Scanner(System.in);
        int[] message;
        int[] gen;
        int[] app_message;
        int[] rem;
        int[] trans_message;
        int message_bits, gen_bits, total_bits;

        System.out.println("\n Enter number of bits in message : ");
        message_bits = in.nextInt();
        message = new int[message_bits];
        System.out.println("\n Enter message bits : ");
        for (int i = 0; i < message_bits; i++)
            message[i] = in.nextInt();
        System.out.println("\n Enter number of bits in gen : ");
        gen_bits = in.nextInt();

        gen = new int[gen_bits];
        System.out.println("\n Enter gen bits : ");
        for (int i = 0; i < gen_bits; i++) {
            gen[i] = in.nextInt();
        }
        total_bits = message_bits + gen_bits - 1;

        app_message = new int[total_bits];
        rem = new int[total_bits];
        trans_message = new int[total_bits];

        for (int i = 0; i < message.length; i++) {
            app_message[i] = message[i];
        }

        System.out.print("\n Message bits are : ");
        for (int i = 0; i < message_bits; i++) {
            System.out.print(message[i]);
        }
        System.out.print("\n Generators bits are : ");
        for (int i = 0; i < gen_bits; i++) {
            System.out.print(gen[i]);
        }

        System.out.print("\n Appended message is : ");
        for (int i = 0; i < app_message.length; i++) {
            System.out.print(app_message[i]);
        }

        for (int j = 0; j < app_message.length; j++) {
            rem[j] = app_message[j];
        }

        rem = computeCRC(app_message, gen, rem);

        for (int i = 0; i < app_message.length; i++) {
            trans_message[i] = (app_message[i] ^ rem[i]);
        }

        System.out.println("\n Transmitted message from the transmitter is : ");
        for (int i = 0; i < trans_message.length; i++) {
            System.out.print(trans_message[i]);
        }

        System.out.println("\n Enter received message of " + total_bits + " bits at receiver end : ");
        for (int i = 0; i < trans_message.length; i++) {
            trans_message[i] = in.nextInt();
            ;
        }
        System.out.println("\n Received message is :");
        for (int i = 0; i < trans_message.length; i++) {
            System.out.print(trans_message[i]);
        }

        for (int j = 0; j < trans_message.length; j++) {
            rem[j] = trans_message[j];
        }
        rem = computeCRC(trans_message, gen, rem);
        for (int i = 0; i < rem.length; i++) {
            if (rem[i] != 0)

            {
                System.out.println("\n There is Error in the received me ");
                break;
            }
            if (i == rem.length - 1)

                System.out.println("\n There is No Error in the received m ");
        }
    }

    static int[] computeCRC(int app_message[], int gen[], int rem[]) {
        int current = 0;
        while (true) {
            for (int i = 0; i < gen.length; i++) {
                rem[current + i] = (rem[current + i] ^ gen[i]);
            }
            while (rem[current] == 0 && current != rem.length - 1) {
                current++;
            }
            if ((rem.length - current) < gen.length) {
                break;
            }
        }
        return rem;
    }
}

------------
1.Implement an Ethernet LAN using n nodes and set multiple traffic nodes and plotcongestion 
window for different source / destination.
 
set ns [new Simulator]
set nf [open prog3.nam w]
$ns namtrace-all $nf
set nd [open prog3.tr w]
$ns trace-all $nd
$ns color 1 Blue
$ns color 2 Red
proc finish { } {
global ns nf nd
$ns flush-trace
close $nf
close $nd
exec nam prog3.nam &
exit 0
}
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]
set n6 [$ns node]
set n7 [$ns node]
set n8 [$ns node]
$n7 shape box
$n7 color Blue
$n8 shape hexagon
$n8 color Red
$ns duplex-link $n1 $n0 2Mb 10ms DropTail
 
$ns duplex-link $n2 $n0 2Mb 10ms DropTail
$ns duplex-link $n0 $n3 1Mb 20ms DropTail
$ns make-lan "$n3 $n4 $n5 $n6 $n7 $n8" 512Kb 40ms LL Queue/DropTail Mac/802_3
$ns duplex-link-op $n1 $n0 orient right-down
$ns duplex-link-op $n2 $n0 orient right-up
$ns duplex-link-op $n0 $n3 orient right
$ns queue-limit $n0 $n3 20
set tcp1 [new Agent/TCP/Vegas]
$ns attach-agent $n1 $tcp1
set sink1 [new Agent/TCPSink]
$ns attach-agent $n7 $sink1
$ns connect $tcp1 $sink1
$tcp1 set class_ 1
$tcp1 set packetsize_ 55
set ftp1 [new Application/FTP]
$ftp1 attach-agent $tcp1
set tfile [open cwnd.tr w]
$tcp1 attach $tfile
$tcp1 trace cwnd_
set tcp2 [new Agent/TCP/Reno]
$ns attach-agent $n2 $tcp2
set sink2 [new Agent/TCPSink]
$ns attach-agent $n8 $sink2
$ns connect $tcp2 $sink2
$tcp2 set class_ 2
$tcp2 set packetSize_ 55
set ftp2 [new Application/FTP]
$ftp2 attach-agent $tcp2
set tfile2 [open cwnd2.tr w]
$tcp2 attach $tfile2
$tcp2 trace cwnd_
 
$ns at 0.5 "$ftp1 start"
$ns at 1.0 "$ftp2 start"
$ns at 5.0 "$ftp2 stop"
$ns at 5.0 "$ftp1 stop"
$ns at 5.5 "finish"
$ns run
 
BEGIN {
}
{
if($6=="cwnd_") {
printf("%f\t%f\n",$1,$7);
}
}
END {
}

-----------
3.Implement simple ESS and with transmitting nodes in wire-less LAN by simulationand
determine the performance with respect to transmission of packets.
 
set ns [new Simulator]
set tf [open prog4.tr w]
$ns trace-all $tf
set topo [new Topography]
$topo load_flatgrid 1000 1000
set nf [open prog4.nam w]
$ns namtrace-all-wireless $nf 1000 1000
set val(chan) Channel/WirelessChannel ;
set val(prop) Propagation/TwoRayGround ;
set val(netif) Phy/WirelessPhy ;
set val(mac) Mac/802_11 ;
set val(ifq) Queue/DropTail/PriQueue ;
set val(ll) LL ;
set val(ant) Antenna/OmniAntenna ;
set val(ifqlen) 50 ;
set val(nn) 2 ;
set val(rp) AODV ;
set val(x) 500 ;
set val(y) 400 ;
set val(stop) 10.0 ;
$ns node-config -adhocRouting $val(rp) \
-llType $val(ll) \
-macType $val(mac) \
-ifqType $val(ifq) \
-ifqLen $val(ifqlen) \
-antType $val(ant) \
-propType $val(prop) \
-phyType $val(netif) \
-channelType $val(chan) \
-topoInstance $topo \
-agentTrace ON \
-routerTrace ON \
 -macTrace OFF \
 -movementTrace ON
create-god 3
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
$n0 label "tcp0"
$n1 label "sink1/tcp1"
$n2 label "sink2"
$n0 set X_ 50
$n0 set Y_ 50
$n0 set Z_ 0
$n1 set X_ 100
$n1 set Y_ 100
$n1 set Z_ 0
$n2 set X_ 600
$n2 set Y_ 600
$n2 set Z_ 0
$ns at 0.1 "$n0 setdest 50 50 15"
$ns at 0.1 "$n1 setdest 100 100 25"
$ns at 0.1 "$n2 setdest 600 600 25"
set tcp0 [new Agent/TCP]
$ns attach
-agent $n0 $tcp0
set ftp0 [new Application/FTP]
$ftp0 attach
-agent $tcp0
set sink1 [new Agent/TCPSink]
$ns attach
-agent $n1 $sink1
$ns connect $tcp0 $sink1
set tcp1 [new Agent/TCP]
$ns attach
-agent $n1 $tcp1
set ftp1 [new Application/FTP]
$ftp1 attach
-agent $tcp1
set sink2 [new Agent/TCPSink]
$ns attach
-agent $n2 $sink2
$ns connect $tcp1 $sink2
$ns at 5 "$ftp0 start"
$ns at 5 "$ftp1 start"
$ns at 100 "$n1 setdest 550 550 15"
$ns at 190 "$n1 setdest 70 70 15"
proc finish { } {
global ns nf tf
$ns flush-trace
exec nam prog6.nam &
close $tf
exit 0
}
$ns at 250 "finish"
$ns run
 
 
BEGIN{
count1=0
count2=0
pack1=0
pack2=0
time1=0
time2=0
}
{ if($1=="r"&& $3=="_1_" && $4=="AGT")
{ count1++
pack1=pack1+$8
time1=$2 }
if($1=="r" && $3=="_2_" && $4=="AGT")
{ count2++
pack2=pack2+$8
time2=$2 }
}
END{
printf("The Throughput from n0 to n1: %f Mbps \n", ((count1*pack1*8)/(time1*1000000)));
printf("The Throughput from n1 to n2: %f Mbps", ((count2*pack2*8)/(time2*1000000)));
}
